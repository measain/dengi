import time
from datetime import timedelta
from decimal import Decimal, InvalidOperation

from telebot.types import Message
from django.utils.timezone import now

from users.models import User
from wallet.models import Wallet, UserWallet, Invite
from . import bot
from wallet import services as wallet_services
from users.constants import Action
from . import utils
from wallet import utils as wallet_utils


@bot.message_handler(commands=["start"])
def super_start(message: Message):
    telegram_id = message.from_user.id
    user, _ = User.objects.update_or_create(
        id=telegram_id,
        defaults={
            "first_name": message.from_user.first_name,
            "username": message.from_user.username,
        },
    )
    if len(message.text.split()) >= 2 and (uuid := message.text.split()[1]):
        user_wallet = UserWallet.objects.filter(user_id=telegram_id).filter()
        if user_wallet and user_wallet.owner:
            bot.send_message(
                message.chat.id, "–¢—ã —É–∂–µ —Å–æ–∑–¥–∞–≤–∞–ª –∫–æ—à–µ–ª–µ–∫. –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–µ—à—å —É–¥–∞–ª–∏—Ç—å –µ–≥–æ ‚Üí /delete"
            )
            return
        elif user_wallet and not user_wallet.owner:
            bot.send_message(
                message.chat.id, "–¢—ã —É–∂–µ —Å–≤—è–∑–∞–Ω —Å –¥—Ä—É–≥–∏–º –∫–æ—à–µ–ª—å–∫–æ–º. –ú–æ–∂–µ—à—å –∏–∑ –Ω–µ–≥–æ –≤—ã–π—Ç–∏ ‚Üí /bye"
            )
            return
        invite = Invite.objects.filter(uuid=uuid).first()
        if invite:
            UserWallet.objects.get_or_create(
                wallet_id=invite.wallet_id, user_id=telegram_id, defaults={"owner": False}
            )
            user_wallet = (
                UserWallet.objects.filter(wallet_id=invite.wallet_id, owner=True)
                .select_related("user")
                .first()
            )
            User.objects.filter(id=telegram_id).update(awaitable_action=Action.DEFAULT)
            bot.send_message(
                message.chat.id,
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ—à–µ–ª–µ–∫ {user_wallet.user.username or user_wallet.user.first_name}",
            )
        else:
            bot.send_message(message.chat.id, "–£–ø—Å! –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º...")
    else:
        bot.send_message(
            message.chat.id,
            f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –ø–æ–º–æ–≥—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ–∏ –¥–µ–Ω—å–≥–∏ üòè",
        )
        time.sleep(2)
        bot.send_message(message.chat.id, "/create ‚Üê —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫")
        time.sleep(3)
        bot.send_message(message.chat.id, "... –Ω—É –∞ –¥–∞–ª—å—à–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º")


@bot.message_handler(commands=["create"])
def check_wallet_exist_or_create(message: Message):
    telegram_id = message.from_user.id
    wallets = Wallet.objects.filter(users__id=telegram_id)
    if wallets:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∫–æ—à–µ–ª–µ–∫")
        time.sleep(1)
        bot.send_message(
            message.chat.id, "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ - –¥–ª—è —ç—Ç–æ–≥–æ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ ‚Üí /delete"
        )
    else:
        User.objects.filter(id=telegram_id).update(awaitable_action=Action.SET_SUM)
        wallet_services.create_wallet(telegram_id)
        bot.send_message(message.chat.id, "–°—É–ø–µ—Ä!üòâ")
        time.sleep(0.2)  # todo: –Ω–µ –∑–∞–±—É–¥—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å 2 —Å–µ–∫—É–Ω–¥—ã
        bot.send_message(
            message.chat.id,
            "–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è *–≤—ã–∂–∏–≤–∞—Ç—å*",
            parse_mode="MarkdownV2",
        )


@bot.message_handler(content_types=["text"], func=utils.this_set_sum_action)
def set_total_sum(message: Message):
    if message.text.isdigit():
        wallet_services.set_total_sum(message.from_user.id, message.text)
        User.objects.filter(id=message.from_user.id).update(awaitable_action=Action.SET_DEADLINE)
        bot.send_message(
            message.chat.id,
            "–ò —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ç—ã –¥–æ–ª–∂–µ–Ω –Ω–∞ –Ω–∏—Ö –∂–∏—Ç—å?",
        )
        time.sleep(0.2)  # todo: –Ω–µ –∑–∞–±—É–¥—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å 2 —Å–µ–∫—É–Ω–¥—ã
        bot.send_message(
            message.chat.id,
            "\(–ø—Ä–∏—à–ª–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–î–î.–ú–ú.–ì–ì`\)",
            parse_mode="MarkdownV2",
        )
    else:
        bot.reply_to(message, "–ø–æ —Ç–≤–æ–µ–º—É —ç—Ç–æ —Å—É–º–º–∞???")


@bot.message_handler(content_types=["text"], func=utils.this_set_deadline_action)
def set_deadline(message: Message):
    deadline_date = utils.parse_deadline(message.text)
    current_date = now().date()
    if deadline_date is None or deadline_date <= current_date + timedelta(days=2):
        bot.reply_to(
            message,
            "–Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ø–æ–ø—Ä–æ–±—É–π. –µ—â–µ. —Ä–∞–∑.",
        )
        time.sleep(0.2)  # todo: –Ω–µ –∑–∞–±—É–¥—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å 2 —Å–µ–∫—É–Ω–¥—ã
        bot.send_message(
            message.chat.id,
            "–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º –Ω–∞ 2 –¥–Ω—è –≤–ø–µ—Ä–µ–¥...",
        )
        time.sleep(0.2)  # todo: –Ω–µ –∑–∞–±—É–¥—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å 2 —Å–µ–∫—É–Ω–¥—ã
        bot.send_message(
            message.chat.id,
            "\.\.\. –∏ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ \- `–î–î.–ú–ú.–ì–ì`",
            parse_mode="MarkdownV2",
        )
    else:
        wallet_services.set_days_count(message.from_user.id, (deadline_date - current_date).days)
        User.objects.filter(id=message.from_user.id).update(awaitable_action=Action.DEFAULT)
        bot.send_message(
            message.chat.id,
            "–û—Ç–ª–∏—á–Ω–æ!",
        )
        time.sleep(0.2)  # todo: –Ω–µ –∑–∞–±—É–¥—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å 2 —Å–µ–∫—É–Ω–¥—ã
        bot.send_message(
            message.chat.id,
            "–°—Ç–∞—Ä–∞–π—Å—è –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å *–≤—Å–µ* —Å–≤–æ–∏ —Ç—Ä–∞—Ç—ã\! –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å—ã–ª–∞–π –º–Ω–µ —Å—É–º–º—É —Ç—Ä–∞—Ç—ã –∏ —è —Å–∞–º –≤—Å–µ –≤—ã—Å—á–∏—Ç–∞—é\.",
            parse_mode="MarkdownV2",
        )
        time.sleep(0.4)  # todo: –Ω–µ –∑–∞–±—É–¥—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å 2 —Å–µ–∫—É–Ω–¥—ã
        bot.send_message(
            message.chat.id,
            "–ê –µ—â–µ —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∫ —Å–≤–æ–µ–º—É –∫–æ—à–µ–ª—å–∫—É –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤–µ—Å—Ç–∏ —É—á–µ—Ç –≤–º–µ—Å—Ç–µ!",
        )
        time.sleep(0.4)  # todo: –Ω–µ –∑–∞–±—É–¥—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å 2 —Å–µ–∫—É–Ω–¥—ã
        bot.send_message(
            message.chat.id,
            "–°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π ‚Üí /invite",
        )


@bot.message_handler(commands=["invite"])
def create_invite(message: Message):
    wallet = Wallet.objects.filter(users__id=message.from_user.id).first()
    if wallet:
        if not UserWallet.objects.filter(
            wallet=wallet, user_id=message.from_user.id, owner=True
        ).exists():
            bot.send_message(
                message.chat.id,
                "–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞. –î–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π.",
            )
            time.sleep(0.4)  # todo: –Ω–µ –∑–∞–±—É–¥—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å–µ–∫—É–Ω–¥—ã
            bot.send_message(
                message.chat.id,
                "–ü–æ—ç—Ç–æ–º—É –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –∫–æ–º–∞–Ω–¥–æ–π ‚Üí /bye",
            )
        else:
            invite, _ = Invite.objects.get_or_create(wallet=wallet)
            link = wallet_utils.get_invite_link(invite.uuid)
            bot.send_message(message.from_user.id, link)
    else:
        bot.send_message(message.from_user.id, "—è —Ç—É—Ç")


@bot.message_handler(commands=["bye"])
def bye_bye(message: Message):
    user_wallet = UserWallet.objects.filter(user_id=message.from_user.id).first()
    if user_wallet and user_wallet.owner:
        bot.send_message(
            message.chat.id,
            "–í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫, —Ç–æ–ª—å–∫–æ —É–¥–∞–ª–∏—Ç—å ‚Üí /delete",
        )
    elif user_wallet:
        user_wallet.delete()
        bot.send_message(
            message.chat.id,
            "–¢–µ–ø–µ—Ä—å —Ç—ã –±–µ–∑ –∫–æ—à–µ–ª—å–∫–∞. –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –≤—Å–µ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ ‚Üí /create",
        )
    else:
        bot.send_message(
            message.chat.id,
            "–£ –≤–∞—Å –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π ‚Üí /create",
        )


@bot.message_handler(commands=["delete"])
def delete(message: Message):
    user_wallet = UserWallet.objects.filter(user_id=message.from_user.id).first()
    if user_wallet and user_wallet.owner:
        user_wallet.wallet.delete()
        bot.send_message(
            message.chat.id,
            "–ö–æ—à–µ–ª–µ–∫ —É–¥–∞–ª–µ–Ω. –ú–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π ‚Üí /create",
        )
    elif user_wallet:
        bot.send_message(
            message.chat.id,
            "–¢—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞. –ú–æ–∂–µ—à—å –≤—ã–π—Ç–∏ –∏ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π ‚Üí /bye",
        )
    else:
        bot.send_message(
            message.chat.id,
            "–£ —Ç–µ–±—è –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π ‚Üí /create",
        )


@bot.message_handler(content_types=["text"], func=utils.this_default_action)
def update_balance(message: Message):
    formatted_str = message.text.replace(",", ".").strip()
    try:
        spend = Decimal(formatted_str)
        wallet = wallet_services.update_balance(message.from_user.id, spend)
        bot.send_message(
            message.chat.id,
            f"–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {wallet.total_sum}‚ÇΩ",
        )
        if wallet.current_daily_limit >= 0:
            bot.send_message(
                message.chat.id,
                f"–û—Å—Ç–∞–ª–æ—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {wallet.current_daily_limit}‚ÇΩ",
            )
        else:
            bot.send_message(
                message.chat.id,
                f"–ù–æ–≤—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å: {round(wallet.total_sum / (wallet.start_date + timedelta(days=wallet.days_count) - now().date()).days, 2)}‚ÇΩ",
            )
    except InvalidOperation:
        bot.reply_to(
            message,
            "–£–∫–∞–∂–∏ —Ç—Ä–∞—Ç—É –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞, –±–µ–∑ –±—É–∫–≤ –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–∫—Ä–æ–º–µ —Ç–æ—á–∫–∏)",
        )


# todo: –ø—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞–Ω–¥–æ–º–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–Ω—ã—Ö —Ñ—Ä–∞–∑
# todo: –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø—Ä–æ—Ö–æ–¥ –ø–æ –∏–Ω–≤–∞–π—Ç—É
# todo: –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç "–ø–æ—Ç—Ä–∞—Ç–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è", –µ—Å–ª–∏ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –Ω–µ –±—ã–ª –∏—Å—á–µ—Ä–ø–∞–Ω
# todo: –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
