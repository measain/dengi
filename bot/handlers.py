import time

from telebot.types import Message, Update
from telebot import types
from users.models import User
from wallet.models import Wallet
from . import bot
from wallet.services import set_total_sum as set_sum, create_wallet
# from wallet.services import create_wallet


@bot.message_handler(commands=["start"])
def send_welcome(message: Message):
    telegram_id = message.from_user.id
    User.objects.update_or_create(
        id=telegram_id,
        defaults={
            "first_name": message.from_user.first_name,
            "username": message.from_user.username,
        },
    )
    bot.send_message(
        message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –ø–æ–º–æ–≥—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ–∏ –¥–µ–Ω—å–≥–∏ üòè"
    )
    time.sleep(2)
    bot.send_message(message.chat.id, "/newwallet ‚Üê —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫")
    time.sleep(3)
    bot.send_message(message.chat.id, "... –Ω—É –∞ –¥–∞–ª—å—à–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º")


@bot.message_handler(commands=["newwallet"])
def check_wallet_exist_or_create(message: Message):
    telegram_id = message.from_user.id
    wallets = Wallet.objects.filter(users__id=telegram_id)
    if wallets:
        bot.send_message(message.chat.id, "–∫–æ—à–µ–ª—å —É–∂–µ –µ—Å—Ç—å")
        time.sleep(1)
        bot.send_message(
            message.chat.id,
            "–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è *–≤—ã–∂–∏–≤–∞—Ç—å*",
            parse_mode="MarkdownV2",
        )
    else:
        # Wallet.objects.filter()
        create_wallet(telegram_id)
        bot.send_message(message.chat.id, "–°—É–ø–µ—Ä!üòâ")
        time.sleep(0.2)  # –Ω–µ –∑–∞–±—É–¥—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å 2 —Å–µ–∫—É–Ω–¥—ã
        bot.send_message(
            message.chat.id,
            "–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è *–≤—ã–∂–∏–≤–∞—Ç—å*",
            parse_mode="MarkdownV2",
        )


@bot.message_handler(content_types=["text"])
def set_total_sum(message: Message):
    if message.text.isdigit():
        set_sum(message.from_user.id, message.text)
    else:
        bot.reply_to(message, "–ø–æ —Ç–≤–æ–µ–º—É —ç—Ç–æ —Å—É–º–º–∞?")


# @bot.message_handler(content_types=["text"])
# def how_many_days(message: Message):
#     days = message.text
#     counting_daily_sum(days)